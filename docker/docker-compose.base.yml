# docker/docker-compose.base.yml
# Base Docker Compose configuration for shared services
version: '3.8'

networks:
  convex_shared:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  
volumes:
  convex_data:
  dashboard_node_modules:
  shared_cache:

services:
  # Convex Backend Service (shared across all projects)
  convex-backend:
    image: convex/backend:latest
    container_name: convex_backend
    restart: unless-stopped
    networks:
      - convex_shared
    ports:
      - "3210:3210"  # Convex dev server
    volumes:
      - ../convex:/app/convex:ro
      - ../package.json:/app/package.json:ro
      - ../package-lock.json:/app/package-lock.json:ro
      - convex_data:/app/data
      - shared_cache:/app/.cache
    environment:
      - NODE_ENV=production
      - CONVEX_DEPLOYMENT=${CONVEX_DEPLOYMENT:-dev}
      - CONVEX_SITE_URL=${CONVEX_SITE_URL:-http://localhost:3000}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3210/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # AI-Assisted Dashboard (shared frontend)
  dashboard:
    build:
      context: ../dashboard
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    container_name: convex_dashboard
    restart: unless-stopped
    networks:
      - convex_shared
    ports:
      - "3000:3000"
    volumes:
      - ../dashboard:/app/src:ro
      - dashboard_node_modules:/app/node_modules
    environment:
      - NEXT_PUBLIC_CONVEX_URL=${NEXT_PUBLIC_CONVEX_URL:-http://convex-backend:3210}
      - NODE_ENV=production
    depends_on:
      convex-backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: convex_redis
    restart: unless-stopped
    networks:
      - convex_shared
    ports:
      - "6379:6379"
    volumes:
      - ../docker/redis/redis.conf:/etc/redis/redis.conf
      - convex_data:/data
    command: redis-server /etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy for routing and load balancing
  nginx:
    image: nginx:alpine
    container_name: convex_nginx
    restart: unless-stopped
    networks:
      - convex_shared
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ../docker/ssl:/etc/ssl:ro
    depends_on:
      - dashboard
      - convex-backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring and logging
  prometheus:
    image: prom/prometheus:latest
    container_name: convex_prometheus
    restart: unless-stopped
    networks:
      - convex_shared
    ports:
      - "9090:9090"
    volumes:
      - ../docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - convex_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  grafana:
    image: grafana/grafana:latest
    container_name: convex_grafana
    restart: unless-stopped
    networks:
      - convex_shared
    ports:
      - "3001:3000"
    volumes:
      - convex_data:/var/lib/grafana
      - ../docker/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    depends_on:
      - prometheus

  # PostgreSQL database for Convex data persistence and analytics
  postgres:
    image: postgres:15-alpine
    container_name: convex_postgres
    restart: unless-stopped
    networks:
      - convex_shared
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../docker/postgres/init:/docker-entrypoint-initdb.d:ro
      - ../docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-convex}
      - POSTGRES_USER=${POSTGRES_USER:-convex}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-convex_secure_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-convex} -d ${POSTGRES_DB:-convex}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # MinIO for object storage (files, assets, backups)
  minio:
    image: minio/minio:latest
    container_name: convex_minio
    restart: unless-stopped
    networks:
      - convex_shared
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-admin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-admin123456}
      - MINIO_BROWSER_REDIRECT_URL=http://localhost:9001
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Elasticsearch for log aggregation and search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: convex_elasticsearch
    restart: unless-stopped
    networks:
      - convex_shared
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ../docker/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx1g"
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '\"status\":\"\\(green\\|yellow\\)\"'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # RabbitMQ for message queuing between agents
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: convex_rabbitmq
    restart: unless-stopped
    networks:
      - convex_shared
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ../docker/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-convex}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-convex_queue_pass}
      - RABBITMQ_DEFAULT_VHOST=/convex
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

